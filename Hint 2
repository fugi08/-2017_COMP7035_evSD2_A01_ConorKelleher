
/**
* This class models the concept (a type of objects) of a single linked node<br>. 
*/
public class MyNode {

	//--------------------------------------------------
	// Attributes
	//--------------------------------------------------
	/**
	 * @param info: It represent the element contained in MyNode.
	 * @param next: It represents the MyNode placed next (referenced) from this object.
	 */
	private int info;
	private MyNode next;
	
	//--------------------------------------------------
	// Constructor
	//--------------------------------------------------
	/**
	 * The constructor creates 1 instance (1 object) of the class MyNode<br>
	 * @param i: The element contained in MyNode.
	 * @param n: The MyNode placed next (referenced) from this object.
	 */
	public MyNode(int i, MyNode n){
		this.info = i;
		this.next = n;
	}
	
	//--------------------------------------------------
	// Get methods
	//--------------------------------------------------
	/**
	 * Given a concrete MyNode (this), the function returns its content.<br>
	 * @return: The content of the concrete object (this) calling to the method.
	 */	
	public int getInfo(){
		return this.info;
	}
	
	/**
	 * Given a concrete MyNode (this), the function returns the MyNode placed next (referenced) from this object.<br>
	 * @return: The content of the concrete MyNode placed next (referenced) from this object.
	 */	
	public MyNode getNext(){
		return this.next;
	}
	
	//--------------------------------------------------
	// Set methods
	//--------------------------------------------------
	/**
	 * Given a concrete MyNode (this), the function modifies its content.<br>
	 * @param i: The new content of the concrete object (this) calling to the method.
	 */	
	public void setInfo(int i){
		this.info = i;
	}
	
	/**
	 * Given a concrete MyNode (this), the function modifies the MyNode placed next (referenced) from this object.<br>
	 * @param n: The new MyNode placed next (referenced) from this object.
	 */		
	public void setNext(MyNode n){
		this.next = n;
	}

}


/**
* The main class of our project.<br>. 
*/
public class MyMain {

	//-------------------------------------
	//	testMyQueue 
	//-------------------------------------	
	/** 
	* This function tests MyDynamicQueue and its static implementation.<br>
	*/
	public static void testMyQueue() {
		
		//-------------------------------------
		//	1. We create myDynamicQueue 
		//-------------------------------------
		MyDynamicQueue m = new MyDynamicQueue(); 

		//-------------------------------------
		//	2. isEmpty 
		//-------------------------------------
		System.out.println("Is it empty: " + m.isEmpty()); //--> The current length is 0 as myDynamicQueue is created initially empty
				
		//-------------------------------------
		//	3. Add three elements 
		//-------------------------------------
		m.add(3); //--> m : [3]
		m.add(4);	//--> m : [3, 4]	
		m.add(5); //--> m : [3, 4, 5]
		m.add(6); //--> m : [3, 4, 5, 6]
		
		//-------------------------------------
		//	4. Get the first item in myDynamicQueue                         
                //----------------------------------	
		System.out.println("First item = " + m.first()); //--> Returns 3
		m.remove();
		System.out.println("First item = " + m.first()); //--> Returns 4
		
		//-------------------------------------
		//	5. Remove two elements and fail to remove another one
		//-------------------------------------			
		m.remove(); //--> m : [5, 6]
		m.remove(); //--> m : [6]
		System.out.println("First item = " + m.first()); //--> Returns 6
		m.remove(); //--> m : []
		m.remove(); //--> Fails, myDynamicQueue is already empty

	}             
	
	//-------------------------------------
	//	main 
	//-------------------------------------		
	/**
	 * Main Method:<br> 
	 * Calls to the function testMyQueue to test MyDynamicQueue and its implementation.<br>
	 * @param args: We will run the program parameter free, so do not worry about it. 
	 */	
	public static void main(String[] args) {
		//1. We call to the function testMyQueue
		testMyQueue();
	}

}




public class MyDynamicQueue 
{
	private MyNode first;
	private int numItems;
	//--------------------------------------------------
	// Attributes
	//--------------------------------------------------

	
	//-------------------------------------------------------------------
	// Basic Operation --> Construct MyDynamicQueue
	//-------------------------------------------------------------------		
	public MyDynamicQueue()
	{
		first = null; 
		this.numItems = 0;
	}

	/*public MyNode getFirst() {
		return first;
	}

	public void setFirst(MyNode first) {
		this.first = first;
	}
*/
	//-------------------------------------------------------------------
	// Basic Operation --> Check if MyDynamicQueue is empty: isEmpty
	//-------------------------------------------------------------------	
	public boolean isEmpty()
	{
		return (first == null);
	}
	
	//-------------------------------------------------------------------
	// Basic Operation (Partial) --> Get first element from front of MyDynamicQueue: first
	//-------------------------------------------------------------------
	
	public int first()
	{
		if(first != null)
		{	
		return first;
		}
	}

	//-------------------------------------------------------------------
	// Basic Operation --> Add element to back of MyDynamicQueue: add 
	//-------------------------------------------------------------------
	public void add(int info)
	{
		 MyNode newNode = new MyNode(info, null);
		 
		 if(first==null)
		 {
			 first = newNode;
			 return;
		 } 
		 
		 MyNode tempNode = first;
		 while(tempNode.next!=null)
		 {
			 tempNode = tempNode.next;
		 }
		 tempNode.next = newNode;
		 numItems++;
	}

	
	
	//-------------------------------------------------------------------
	// Basic Operation (Partial) --> Remove element from front of MyDynamicQueue: remove 
	//-------------------------------------------------------------------	
	public MyNode remove()
	{
		MyNode temp = first;
		first = first.next;
		return temp;
		
		
		
    }

}
	



